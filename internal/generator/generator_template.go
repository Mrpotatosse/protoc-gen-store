package generator

const (
	pbStoreTemplate string = `// Code generated by protoc-gen-store. DO NOT EDIT.
// version: v0.0.1
// source: {{.Proto.Name}}

package {{.GoPackageName}}

import (
	"fmt"
	"context"

	bolt "go.etcd.io/bbolt"
	"google.golang.org/protobuf/proto"
)

{{$self := .}}
const ({{range $message := .Messages}}
	{{$message.GoIdent.GoName}}Key string = "{{if $self.Proto.Package}}{{$self.Proto.Package}}.{{else}}{{end}}{{$message.GoIdent.GoName}}"{{end}}
)

type StoreSoul []byte

type Store struct {
    db *bolt.DB
}
{{range $message := .Messages}}
func (store *Store) Set{{$message.GoIdent.GoName}}(ctx context.Context, soul StoreSoul, value *{{$message.GoIdent.GoName}}) (err error) {
	err = store.db.Update(func(tx *bolt.Tx) error {
		bucket, err := tx.CreateBucketIfNotExists([]byte({{$message.GoIdent.GoName}}Key))
		if err != nil {
			return err
		}

		data, err := proto.Marshal(value)
		if err != nil {
			return err
		}

		bucket.Put(soul, data)
	
		return nil
	})

	return err
}

func (store *Store) Get{{$message.GoIdent.GoName}}(ctx context.Context, soul StoreSoul) (result *{{$message.GoIdent.GoName}}, err error) {
	err = store.db.View(func(tx *bolt.Tx) error {
		bucket := tx.Bucket([]byte({{$message.GoIdent.GoName}}Key))
		if bucket == nil {
			return nil
		}

		data := bucket.Get(soul)
		if data == nil {
			return nil
		}

		err := proto.Unmarshal(data, result)
		if err != nil {
			return err
		}

		return nil
	})

	return result, err
}
{{end}}
`
)
